# -*- coding: utf-8 -*-
"""Exhaustive_Search_10101190154

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W8LASUxLvDviP7fNvyu7EbE5Bw9hJbWh
"""

import numpy as np
import time

start = time.time() #penanda watu operasi dimulai

building_file = open("Bangunan1.txt", "r").read() #membuka file bangunan, lalu membaca isinya
rows = building_file.split("\n") #membagi isi file ke dalam list tiap barisnya

#mengambil isi file pada baris pertama yang merupakan input ukuran dari baris, kolom, dan tinggi lantai bangunan
input_size = list(map(int, rows[0].split(" "))) 
rmax = input_size[0]-1 #mengambil nilai baris maksimal, ada -1 karena index mulai dari 0
cmax = input_size[1]-1 #mengambil nilai kolom maksimal, ada -1 karena index mulai dari 0
hmax = input_size[2]-1 #mengambil nilai tinggi lantai maksimal, ada -1 karena index mulai dari 0
building_matrix = [] # bangunan awal berbentuk list kosong yang nantinya akan kita buat menjadi matrix
result = ["", 0] # hasil berupa string yang berisi jalur yang ditempuh(awalnya berupa string kosong) dan total harta karun yang terkumpul(awalnya masih 0)

def matrix(building_matrix, building_file_rows):
    # Fungsi matrix untuk membentuk matrix bangunan yang berisi tiap nilai data pada baris, kolom, dan lantai masing-masing...
    # dan di tiap baris dan kolom tiap lantainya ada data dari nilai harta karun yang dapat dikumpulkan
    x=1 #index nilai harta karun dimulai dari index 1 pada file (index 0 adalah input)
    while x < len(building_file_rows)-1:
        lantai = [] # list yang berisi baris dan kolom dari suatu lantai
        y = x+rmax+1 
        while x < y:
            lantai.append(list(map(int, building_file_rows[x].split(" ")))) # menambah list berisi setiap nilai pada baris dan kolom suatu lantai
            x = x+1 
        building_matrix.append(lantai) # menambah list yang berisi nilai dari baris dan kolom suatu lantai ke dalam list bangunan

def exhaustive_search(map, h, r, c, total, path, result):
    # h = lantai dari bangunan yang sedang ditinjau.
    # r = baris dari suatu lantai bangunan yang sedang ditinjau.
    # c = kolom dari suatu lantai bangunan yang sedang ditinjau.
    # total = tempat menyimpan nilai harta karun yang dikumpulkan selama operasi
    # path = tempat menyimpan jalur yang dilalui selama operasi
    # result = hasil akhir dari jalur yang dilalui dan total harta karun yang didapatkan pada operasi

    if ( h == hmax and r == rmax and c == cmax):
        # Jika posisi sudah berada pada lantai, baris, dan kolom maksimal(paling ujung)
        
        if total >= result[1]:
            result[0] = path
            result[1] = total
            # maka didapatkan hasil dari operasi berupa jalur yang dilalui dan nilai total harta karun yang dikumpulkan
    else:
        if h != hmax:
            exhaustive_search(map, h+1, r, c, total+map[h + 1][r][c], path+"A",  result)
            # Jika lantai saat ini belum mencapai lantai paling atas/akhir, maka cek lantai berikutnya(ke atas)
        if r != rmax:
            exhaustive_search(map, h, r+1, c, total+map[h][r + 1][c], path+"S",  result)
            # Jika baris saat ini belum mencapai baris paling bawah/akhir, maka cek baris di bawahnya  
        if c != cmax:
            exhaustive_search(map, h, r, c+1, total+map[h][r][c + 1], path+"T",  result)
            # Jika kolom saat ini belum mencapai kolom paling kanan/akhir, maka cek kolom di kanannya
            

matrix(building_matrix, rows)
# print(building_matrix) 
exhaustive_search(building_matrix, 0, 0, 0, building_matrix[0][0][0], "",  result)
print(result[0]) #path/Jalur yang dilalui/diambil
print(result[1]) #total/nilai akhir harta karun yang dikumpulkan
operation_time = (time.time()-start) #jumlah waktu operasi keseluruhan
# print(operation_time)